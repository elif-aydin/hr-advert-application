'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasePickerHoc = undefined;

var _compose = require('recompose/compose');

var _compose2 = _interopRequireDefault(_compose);

var _lifecycle = require('recompose/lifecycle');

var _lifecycle2 = _interopRequireDefault(_lifecycle);

var _setDisplayName = require('recompose/setDisplayName');

var _setDisplayName2 = _interopRequireDefault(_setDisplayName);

var _withHandlers = require('recompose/withHandlers');

var _withHandlers2 = _interopRequireDefault(_withHandlers);

var _withRenderProps = require('recompose/withRenderProps');

var _withRenderProps2 = _interopRequireDefault(_withRenderProps);

var _withState = require('recompose/withState');

var _withState2 = _interopRequireDefault(_withState);

var _WithUtils = require('../_shared/WithUtils');

var _WithUtils2 = _interopRequireDefault(_WithUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getValidDateOrCurrent = function getValidDateOrCurrent(_ref) {
  var utils = _ref.utils,
      value = _ref.value;

  var date = utils.date(value);

  return utils.isValid(date) && value !== null ? date : utils.date();
};

var BasePickerHoc = exports.BasePickerHoc = (0, _compose2.default)((0, _WithUtils2.default)(), (0, _setDisplayName2.default)('BasePicker'), (0, _withState2.default)('date', 'changeDate', getValidDateOrCurrent), (0, _withState2.default)('isAccepted', 'handleAcceptedChange', false), (0, _lifecycle2.default)({
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (prevProps.value !== this.props.value) {
      this.props.changeDate(getValidDateOrCurrent(this.props));
    }
  }
}), (0, _withHandlers2.default)({
  handleClear: function handleClear(_ref2) {
    var onChange = _ref2.onChange;
    return function () {
      return onChange(null);
    };
  },
  handleAccept: function handleAccept(_ref3) {
    var onChange = _ref3.onChange,
        date = _ref3.date;
    return function () {
      return onChange(date);
    };
  },
  handleSetTodayDate: function handleSetTodayDate(_ref4) {
    var changeDate = _ref4.changeDate,
        utils = _ref4.utils;
    return function () {
      return changeDate(utils.date());
    };
  },
  handleTextFieldChange: function handleTextFieldChange(_ref5) {
    var changeDate = _ref5.changeDate,
        onChange = _ref5.onChange;
    return function (date) {
      if (date === null) {
        undefined.handleClear();
      } else {
        changeDate(date, function () {
          return onChange(date);
        });
      }
    };
  },
  pick12hOr24hFormat: function pick12hOr24hFormat(_ref6) {
    var format = _ref6.format,
        labelFunc = _ref6.labelFunc,
        ampm = _ref6.ampm;
    return function (default12hFormat, default24hFormat) {
      if (format || labelFunc) {
        return format;
      }

      return ampm ? default12hFormat : default24hFormat;
    };
  },
  handleChange: function handleChange(_ref7) {
    var autoOk = _ref7.autoOk,
        changeDate = _ref7.changeDate,
        onChange = _ref7.onChange,
        handleAcceptedChange = _ref7.handleAcceptedChange;
    return function (newDate) {
      var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      changeDate(newDate, function () {
        if (isFinish && autoOk) {
          onChange(newDate);
          // pass down accept true, and make it false in the next tick
          handleAcceptedChange(true, function () {
            return handleAcceptedChange(false);
          });
        }
      });
    };
  }
}));

exports.default = (0, _withRenderProps2.default)(BasePickerHoc);