'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePickerWrapper = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ModalWrapper = require('../wrappers/ModalWrapper');

var _ModalWrapper2 = _interopRequireDefault(_ModalWrapper);

var _DatePicker = require('./DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _propTypes3 = require('../constants/prop-types');

var _propTypes4 = _interopRequireDefault(_propTypes3);

var _BasePicker = require('../_shared/BasePicker');

var _BasePicker2 = _interopRequireDefault(_BasePicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DatePickerWrapper = function DatePickerWrapper(props) {
  var allowKeyboardControl = props.allowKeyboardControl,
      animateYearScrolling = props.animateYearScrolling,
      autoOk = props.autoOk,
      disableFuture = props.disableFuture,
      disablePast = props.disablePast,
      format = props.format,
      forwardedRef = props.forwardedRef,
      labelFunc = props.labelFunc,
      leftArrowIcon = props.leftArrowIcon,
      maxDate = props.maxDate,
      minDate = props.minDate,
      onChange = props.onChange,
      openToYearSelection = props.openToYearSelection,
      renderDay = props.renderDay,
      rightArrowIcon = props.rightArrowIcon,
      shouldDisableDate = props.shouldDisableDate,
      value = props.value,
      other = (0, _objectWithoutProperties3.default)(props, ['allowKeyboardControl', 'animateYearScrolling', 'autoOk', 'disableFuture', 'disablePast', 'format', 'forwardedRef', 'labelFunc', 'leftArrowIcon', 'maxDate', 'minDate', 'onChange', 'openToYearSelection', 'renderDay', 'rightArrowIcon', 'shouldDisableDate', 'value']);


  return _react2.default.createElement(
    _BasePicker2.default,
    props,
    function (_ref) {
      var date = _ref.date,
          handleAccept = _ref.handleAccept,
          handleChange = _ref.handleChange,
          handleClear = _ref.handleClear,
          handleDismiss = _ref.handleDismiss,
          handleSetTodayDate = _ref.handleSetTodayDate,
          handleTextFieldChange = _ref.handleTextFieldChange,
          isAccepted = _ref.isAccepted;
      return _react2.default.createElement(
        _ModalWrapper2.default,
        (0, _extends3.default)({
          disableFuture: disableFuture,
          disablePast: disablePast,
          format: format,
          labelFunc: labelFunc,
          maxDate: maxDate,
          minDate: minDate,
          onAccept: handleAccept,
          onChange: handleTextFieldChange,
          onClear: handleClear,
          onDismiss: handleDismiss,
          onSetToday: handleSetTodayDate,
          ref: forwardedRef,
          value: value,
          isAccepted: isAccepted
        }, other),
        _react2.default.createElement(_DatePicker2.default, {
          allowKeyboardControl: allowKeyboardControl,
          animateYearScrolling: animateYearScrolling,
          date: date,
          disableFuture: disableFuture,
          disablePast: disablePast,
          leftArrowIcon: leftArrowIcon,
          maxDate: maxDate,
          minDate: minDate,
          onChange: handleChange,
          openToYearSelection: openToYearSelection,
          renderDay: renderDay,
          rightArrowIcon: rightArrowIcon,
          shouldDisableDate: shouldDisableDate
        })
      );
    }
  );
};

exports.DatePickerWrapper = DatePickerWrapper;
DatePickerWrapper.propTypes = {
  /** Datepicker value */
  value: _propTypes4.default.date,
  /** Min selectable date */
  minDate: _propTypes4.default.date,
  /** Max selectable date */
  maxDate: _propTypes4.default.date,
  /** Date format string for input */
  format: _propTypes2.default.string,
  /** Callback firing when date accepted */
  onChange: _propTypes2.default.func.isRequired,
  /** Auto accept date on selection */
  autoOk: _propTypes2.default.bool,
  /** Disable past dates */
  disablePast: _propTypes2.default.bool,
  /** Disable future dates */
  disableFuture: _propTypes2.default.bool,
  /** To animate scrolling to current year (with scrollIntoView) */
  animateYearScrolling: _propTypes2.default.bool,
  /** Open datepicker from year selection */
  openToYearSelection: _propTypes2.default.bool,
  /** Allow to specify dynamic label for text field labelFunc(date, invalidLabel) */
  labelFunc: _propTypes2.default.func,
  /** Left arrow icon */
  leftArrowIcon: _propTypes2.default.node,
  /** Right arrow icon */
  rightArrowIcon: _propTypes2.default.node,
  /** Custom renderer for day renderDay(date, selectedDate, dayInCurrentMonth) */
  renderDay: _propTypes2.default.func,
  /** Disable specific date */
  shouldDisableDate: _propTypes2.default.func,
  /** Enables keyboard listener for moving between days in calendar */
  allowKeyboardControl: _propTypes2.default.bool,
  forwardedRef: _propTypes2.default.func
};

DatePickerWrapper.defaultProps = {
  value: new Date(),
  format: 'MMMM Do',
  autoOk: false,
  minDate: '1900-01-01',
  maxDate: '2100-01-01',
  disableFuture: false,
  disablePast: false,
  animateYearScrolling: false,
  openToYearSelection: false,
  allowKeyboardControl: true,
  leftArrowIcon: 'keyboard_arrow_left',
  rightArrowIcon: 'keyboard_arrow_right',
  renderDay: undefined,
  labelFunc: undefined,
  shouldDisableDate: undefined,
  forwardedRef: undefined
};

exports.default = _react2.default.forwardRef(function (props, ref) {
  return _react2.default.createElement(DatePickerWrapper, (0, _extends3.default)({}, props, { forwardedRef: ref }));
});