'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTimePickerWrapper = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _withStyles = require('@material-ui/core/styles/withStyles');

var _withStyles2 = _interopRequireDefault(_withStyles);

var _propTypes3 = require('../constants/prop-types');

var _propTypes4 = _interopRequireDefault(_propTypes3);

var _ModalWrapper = require('../wrappers/ModalWrapper');

var _ModalWrapper2 = _interopRequireDefault(_ModalWrapper);

var _DateTimePicker = require('./DateTimePicker');

var _DateTimePicker2 = _interopRequireDefault(_DateTimePicker);

var _BasePicker = require('../_shared/BasePicker');

var _BasePicker2 = _interopRequireDefault(_BasePicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateTimePickerWrapper = function DateTimePickerWrapper(props) {
  var value = props.value,
      format = props.format,
      autoOk = props.autoOk,
      openTo = props.openTo,
      classes = props.classes,
      minDate = props.minDate,
      maxDate = props.maxDate,
      showTabs = props.showTabs,
      autoSubmit = props.autoSubmit,
      disablePast = props.disablePast,
      disableFuture = props.disableFuture,
      leftArrowIcon = props.leftArrowIcon,
      rightArrowIcon = props.rightArrowIcon,
      dateRangeIcon = props.dateRangeIcon,
      timeIcon = props.timeIcon,
      renderDay = props.renderDay,
      ampm = props.ampm,
      shouldDisableDate = props.shouldDisableDate,
      animateYearScrolling = props.animateYearScrolling,
      fadeTimeout = props.fadeTimeout,
      forwardedRef = props.forwardedRef,
      allowKeyboardControl = props.allowKeyboardControl,
      other = (0, _objectWithoutProperties3.default)(props, ['value', 'format', 'autoOk', 'openTo', 'classes', 'minDate', 'maxDate', 'showTabs', 'autoSubmit', 'disablePast', 'disableFuture', 'leftArrowIcon', 'rightArrowIcon', 'dateRangeIcon', 'timeIcon', 'renderDay', 'ampm', 'shouldDisableDate', 'animateYearScrolling', 'fadeTimeout', 'forwardedRef', 'allowKeyboardControl']);


  return _react2.default.createElement(
    _BasePicker2.default,
    props,
    function (_ref) {
      var date = _ref.date,
          handleAccept = _ref.handleAccept,
          handleChange = _ref.handleChange,
          handleClear = _ref.handleClear,
          handleDismiss = _ref.handleDismiss,
          handleSetTodayDate = _ref.handleSetTodayDate,
          handleTextFieldChange = _ref.handleTextFieldChange,
          isAccepted = _ref.isAccepted,
          pick12hOr24hFormat = _ref.pick12hOr24hFormat;
      return _react2.default.createElement(
        _ModalWrapper2.default,
        (0, _extends3.default)({
          ref: forwardedRef,
          dialogContentClassName: classes.dialogContent,
          disableFuture: disableFuture,
          disablePast: disablePast,
          format: pick12hOr24hFormat('MMMM Do hh:mm a', 'MMMM Do HH:mm'),
          maxDate: maxDate,
          minDate: minDate,
          onAccept: handleAccept,
          onChange: handleTextFieldChange,
          onClear: handleClear,
          onDismiss: handleDismiss,
          onSetToday: handleSetTodayDate,
          value: value,
          isAccepted: isAccepted
        }, other),
        _react2.default.createElement(_DateTimePicker2.default, {
          allowKeyboardControl: allowKeyboardControl,
          ampm: ampm,
          animateYearScrolling: animateYearScrolling,
          autoSubmit: autoSubmit,
          date: date,
          dateRangeIcon: dateRangeIcon,
          disableFuture: disableFuture,
          disablePast: disablePast,
          fadeTimeout: fadeTimeout,
          leftArrowIcon: leftArrowIcon,
          maxDate: maxDate,
          minDate: minDate,
          onChange: handleChange,
          openTo: openTo,
          renderDay: renderDay,
          rightArrowIcon: rightArrowIcon,
          shouldDisableDate: shouldDisableDate,
          showTabs: showTabs,
          timeIcon: timeIcon
        })
      );
    }
  );
};

exports.DateTimePickerWrapper = DateTimePickerWrapper;
DateTimePickerWrapper.propTypes = {
  classes: _propTypes2.default.object.isRequired,
  /** DateTimepicker value */
  value: _propTypes4.default.date,
  /** Date format string for input */
  format: _propTypes2.default.string,
  /** Callback firing when date accepted */
  onChange: _propTypes2.default.func.isRequired,
  /** Auto accept date on minute selection */
  autoOk: _propTypes2.default.bool,
  /** Move to the next part of date on select (year -> date -> hour -> minute) */
  autoSubmit: _propTypes2.default.bool,
  /** Disable future dates */
  disableFuture: _propTypes2.default.bool,
  /** Disable past dates */
  disablePast: _propTypes2.default.bool,
  /** Min selectable date */
  minDate: _propTypes4.default.date,
  /** Max selectable date */
  maxDate: _propTypes4.default.date,
  /** Show date/time tabs */
  showTabs: _propTypes2.default.bool,
  /** Left arrow icon */
  leftArrowIcon: _propTypes2.default.node,
  /** Right arrow icon */
  rightArrowIcon: _propTypes2.default.node,
  /** Date tab icon */
  dateRangeIcon: _propTypes2.default.node,
  /** Time tab icon */
  timeIcon: _propTypes2.default.node,
  /** Custom renderer for day renderDay(date, selectedDate, dayInCurrentMonth) */
  renderDay: _propTypes2.default.func,
  /** 12h/24h view for hour selection clock */
  ampm: _propTypes2.default.bool,
  /** Disable specific date */
  shouldDisableDate: _propTypes2.default.func,
  /** Enable animated scrolling to current year */
  animateYearScrolling: _propTypes2.default.bool,
  /** Open directly to particular view */
  openTo: _propTypes2.default.oneOf(['year', 'date', 'hour', 'minutes']),
  /** Switching hour/minutes animation timeout in milliseconds (set 0 to disable) */
  fadeTimeout: _propTypes2.default.number,
  /** Enables keyboard listener for moving between days in calendar */
  allowKeyboardControl: _propTypes2.default.bool,
  forwardedRef: _propTypes2.default.func
};

DateTimePickerWrapper.defaultProps = {
  value: new Date(),
  format: undefined,
  autoOk: false,
  autoSubmit: true,
  openTo: 'date',
  disableFuture: false,
  disablePast: false,
  minDate: '1900-01-01',
  maxDate: '2100-01-01',
  showTabs: true,
  leftArrowIcon: 'keyboard_arrow_left',
  rightArrowIcon: 'keyboard_arrow_right',
  dateRangeIcon: 'date_range',
  timeIcon: 'access_time',
  renderDay: undefined,
  ampm: true,
  shouldDisableDate: undefined,
  animateYearScrolling: false,
  fadeTimeout: 400,
  forwardedRef: undefined,
  allowKeyboardControl: true
};

var styles = {
  dialogContent: {
    width: 310
  }
};

var EnhancedWrapper = (0, _withStyles2.default)(styles, { name: 'MuiPickerDTPickerModal' })(DateTimePickerWrapper);
exports.default = _react2.default.forwardRef(function (props, ref) {
  return _react2.default.createElement(EnhancedWrapper, (0, _extends3.default)({}, props, { forwardedRef: ref }));
});